name: Bump Version

on:
  workflow_run:
    workflows: ["Prepare Version Bump"]
    types:
      - completed

jobs:
  check-previous-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Check if previous workflow was successful
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "### ❌ Previous Workflow Failed" >> $GITHUB_STEP_SUMMARY
            echo "The triggering workflow did not complete successfully, please review the workflow run details." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ Previous Workflow Succeeded" >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash

  check-token:
    runs-on: ubuntu-latest
    steps:
      - name: Check PAT
        run: |
          if [[ -z "${{ secrets.PAT }}" ]]; then
            echo "### ❌ PAT Error" >> $GITHUB_STEP_SUMMARY
            echo "The `PAT` secret is not set, which is required for git operations." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ PAT Found" >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash

  download-artifact:
    needs: [check-previous-workflow, check-token]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: version-${{ github.event.workflow_run.id }}
          path: .
      - name: Read BUMP_TYPE from version file
        id: read_version_file
        run: |
          if [[ ! -f version.txt ]]; then
            echo "### ❌ Missing version.txt" >> $GITHUB_STEP_SUMMARY
            echo "The file `version.txt` does not exist. Cannot proceed with version bumping." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            BUMP_TYPE=$(cat version.txt)
            echo "BUMP_TYPE=${BUMP_TYPE}" >> $GITHUB_ENV

            echo "### 📄 Bump Type" >> $GITHUB_STEP_SUMMARY
            echo "The BUMP_TYPE set for this run is \`${BUMP_TYPE}\`." >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash
    outputs:
      BUMP_TYPE: ${{ steps.read_version_file.outputs.BUMP_TYPE }}

  bump-and-push-version:
    needs: download-artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
      - name: Bump Version and commit
        id: bump
        run: |
          npm version $BUMP_TYPE --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -am "Bump version to $VERSION"
          git tag $VERSION
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

          echo "### 🏷️ New Version" >> $GITHUB_STEP_SUMMARY
          echo "The project version has been bumped to \`${VERSION}\`." >> $GITHUB_STEP_SUMMARY
        shell: bash
      - name: Push changes and tag
        run: |
          git push origin main --follow-tags

          echo "### 🚀 Pushed Changes" >> $GITHUB_STEP_SUMMARY
          echo "The changes including the new tag \`${VERSION}\` have been pushed to the main branch." >> $GITHUB_STEP_SUMMARY
        shell: bash
    outputs:
      version: ${{ steps.bump.outputs.VERSION }}

  create-release:
    needs: bump-and-push-version
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump-and-push-version.outputs.version }}
          name: Release ${{ needs.bump-and-push-version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
      - name: Release Summary
        run: |
          echo "### 🎉 New Release Created" >> $GITHUB_STEP_SUMMARY
          echo "A new release version \`${{ needs.bump-and-push-version.outputs.version }}\` has been published!" >> $GITHUB_STEP_SUMMARY
          echo "[View the new release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.bump-and-push-version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        shell: bash
